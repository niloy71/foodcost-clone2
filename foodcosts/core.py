# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['get_credentials', 'get_db_connection_string', 'send_mail', 'get_query_res_as_pd', 'make_sql_query', 'get_shop_names',
           'get_corporate_restaurants', 'get_shop_id', 'get_corporate_restaurant_id',
           'get_sales_over_period_for_shops_and_product_query', 'get_sales_over_period_in_shop_names_and_product',
           'get_products_sold_for_a_shop', 'get_products_sold_for_a_re', 'get_products_sold_for_a_re_as_pd',
           'get_today_date_string', 'get_previous_n_day', 'get_yesterday', 'last_n_days',
           'compare_sales_for_a_product_every_day', 'get_product_names', 'get_latest_ordering_time_per_day_per_shop',
           'get_sales_for_period_for_shop_per_day', 'get_sales_for_period_for_corporate_restaurant_per_day',
           'get_date_range', 'get_supplier_food_costs_period', 'get_sum_products_bought',
           'get_supplier_food_costs_period_for_resto', 'get_atelier_food_costs_period',
           'get_atelier_food_costs_period_for_resto', 'get_food_costs_for_period_for_shop_per_day',
           'get_food_costs_for_period_for_resto_per_day']

# %% ../nbs/00_core.ipynb 1
import json
import psycopg2
import os
import matplotlib.pyplot as plt
import numpy as np
import datetime
import pandas as pd
from sqlalchemy import create_engine, text as sql_text
import os
import configparser
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

# %% ../nbs/00_core.ipynb 4
def get_credentials():
    config = configparser.ConfigParser()
    config.read('config.ini')
    # Access a value in the configuration file
    values = config['DEFAULT']
    if values:
        print('config.ini file available... using that')
        return values

    print('config.ini file not available... looking at environment variables')
    
    return {
        "PGUSER": os.environ["PGUSER"],
        "PGHOST": os.environ["PGHOST"],
        "PGPASSWORD": os.environ["PGPASSWORD"],
        "PGDATABASE": os.environ["PGDATABASE"],
        "PGPORT": os.environ["PGPORT"],
        "FROM_EMAIL": os.environ["FROM_EMAIL"],
        "SMTP_SERVER": os.environ["SMTP_SERVER"],
        "SMTP_PORT": os.environ["SMTP_PORT"],
        "SMTP_USER": os.environ["SMTP_USER"],
        "SMTP_PASSWORD": os.environ["SMTP_PASSWORD"],
    }
    
    

# %% ../nbs/00_core.ipynb 5
def get_db_connection_string():
    data = get_credentials()
    return 'postgresql://' + data["PGUSER"] + ':' + data["PGPASSWORD"] + '@' + str(data["PGHOST"]) + ':' + str(data["PGPORT"]) + "/" + data["PGDATABASE"]

# %% ../nbs/00_core.ipynb 7
def send_mail(to='', subject='', body=''):
    data = get_credentials()
    msg = MIMEMultipart()
    msg['From'] =  data["FROM_EMAIL"]
    msg['To'] = to

    smtp_server = data["SMTP_SERVER"]
    smtp_port = data["SMTP_PORT"]
    username = data["SMTP_USER"]
    password = data["SMTP_PASSWORD"]

    server = smtplib.SMTP(smtp_server, smtp_port)
    server.starttls()
    server.login(username, password)

    msg['Subject'] = subject
    msg.attach(MIMEText(body, 'html'))

    server.sendmail(msg['From'], msg['To'], msg.as_string())
    server.quit()

# %% ../nbs/00_core.ipynb 8
def get_query_res_as_pd(query):
    connection = create_engine(get_db_connection_string())
    return pd.read_sql_query(
        con=connection.connect(),
        sql=sql_text(query)
    )

# %% ../nbs/00_core.ipynb 10
def make_sql_query(QUERY):
    data = get_credentials()
    try:
        # Connect to the database
        conn = psycopg2.connect(
            host=data["PGHOST"],
            database=data["PGDATABASE"],
            user=data["PGUSER"],
            password=data["PGPASSWORD"]
        )

        # Create a cursor object
        cursor = conn.cursor()

        # Execute the query
        cursor.execute(QUERY)

        # Fetch the result
        result = cursor.fetchall()
        cursor.close()
        conn.close()
        return result    
        
    except (Exception, psycopg2.Error) as error:
        print("Error while connecting to PostgreSQL", error)


# %% ../nbs/00_core.ipynb 11
def get_shop_names():
    return [shop for (i, shop) in make_sql_query("SELECT * FROM v_shop;") if (shop not in ["ATELIER","PAVLOVA BAR ANVERS"])]

# %% ../nbs/00_core.ipynb 12
def get_corporate_restaurants():
    return [cr for (i, cr) in make_sql_query("SELECT * FROM v_resto_entreprise;") if (cr not in ["ATELIER","PAVLOVA BAR ANVERS"])]

# %% ../nbs/00_core.ipynb 14
def get_shop_id(shop_name):
    res = make_sql_query(f"""SELECT id FROM v_shop where name = '{shop_name}';""")
    return res[0][0]

# %% ../nbs/00_core.ipynb 16
def get_corporate_restaurant_id(shop_name):
    res = make_sql_query(f"""SELECT id FROM v_resto_entreprise where name = '{shop_name}';""")
    return res[0][0]

# %% ../nbs/00_core.ipynb 19
def get_sales_over_period_for_shops_and_product_query(start_date, end_date, shop_names, product_id):
    # Construct the SQL query
    shop_name_condition = f"""AND v_shop.name IN ('{"','".join(shop_names)}')""" if len(shop_names) else ""
    query = f"""
        SELECT v_shop.name AS shop_name, 
               DATE(v_pos_order.created_at) AS day, 
               v_product.name AS product_name, 
               SUM(v_pos_order_line.quantity) AS units_sold, 
               SUM(v_pos_order_line.quantity * v_product.price) AS total_sales
        FROM v_pos_order_line
        LEFT JOIN v_product ON v_product.id = v_pos_order_line.product_id
        LEFT JOIN v_pos_order ON v_pos_order.id = v_pos_order_line.order_id
        LEFT JOIN v_pos_session ON v_pos_session.id = v_pos_order.session_id
        LEFT JOIN v_pos ON v_pos.id = v_pos_session.pos_id
        LEFT JOIN v_shop ON v_shop.id = v_pos.shop_id
        WHERE v_pos_order.created_at BETWEEN '{start_date}' AND '{end_date}'
          {shop_name_condition}
          AND v_product.id = {product_id}
        GROUP BY v_shop.id, v_shop.name, day, v_product.id, v_product.name
        ORDER BY v_shop.name, day ASC;
    """

    return query
    
def get_sales_over_period_in_shop_names_and_product(start_date, end_date, shop_names, product_id):
    return [row for row in make_sql_query(get_sales_over_period_for_shops_and_product_query(start_date, end_date, shop_names, product_id))]


# %% ../nbs/00_core.ipynb 20
def get_products_sold_for_a_shop(start_date, end_date, shop_name):
    # Construct the SQL query
    query = f"""
        SELECT v_shop.name AS shop_name, 
               DATE(v_pos_order.created_at) AS day, 
               v_product.name AS product_name, 
               SUM(v_pos_order_line.quantity) AS units_sold, 
               SUM(v_pos_order_line.quantity * v_product.price) AS total_sales
        FROM v_pos_order_line
        LEFT JOIN v_product ON v_product.id = v_pos_order_line.product_id
        LEFT JOIN v_pos_order ON v_pos_order.id = v_pos_order_line.order_id
        LEFT JOIN v_pos_session ON v_pos_session.id = v_pos_order.session_id
        LEFT JOIN v_pos ON v_pos.id = v_pos_session.pos_id
        LEFT JOIN v_shop ON v_shop.id = v_pos.shop_id
        WHERE v_pos_order.created_at BETWEEN '{start_date}' AND '{end_date}'
          AND v_shop.name IN ('{shop_name}')
        GROUP BY v_shop.id, v_shop.name, day, v_product.id, v_product.name
        ORDER BY v_shop.name, day ASC;
    """
    return [row for row in make_sql_query(query)]

# %% ../nbs/00_core.ipynb 21
def get_products_sold_for_a_re(start_date, end_date, shop_name):
    # Construct the SQL query
    query = f"""
        SELECT v_resto_entreprise.name AS shop_name, 
               DATE(v_pos_order.created_at) AS day, 
               v_product.name AS product_name, 
               SUM(v_pos_order_line.quantity) AS units_sold, 
               SUM(v_pos_order_line.quantity * v_product.price) AS total_sales
        FROM v_pos_order_line
        LEFT JOIN v_product ON v_product.id = v_pos_order_line.product_id
        LEFT JOIN v_pos_order ON v_pos_order.id = v_pos_order_line.order_id
        LEFT JOIN v_pos_session ON v_pos_session.id = v_pos_order.session_id
        LEFT JOIN v_pos ON v_pos.id = v_pos_session.pos_id
        LEFT JOIN v_resto_entreprise ON v_resto_entreprise.id = v_pos.shop_id
        WHERE v_pos_order.created_at BETWEEN '{start_date}' AND '{end_date}'
          AND v_resto_entreprise.name IN ('{shop_name}')
        GROUP BY v_resto_entreprise.id, v_resto_entreprise.name, day, v_product.id, v_product.name
        ORDER BY v_resto_entreprise.name, day ASC;
    """
    return [row for row in make_sql_query(query)]

# %% ../nbs/00_core.ipynb 22
def get_products_sold_for_a_re_as_pd(start_date, end_date, shop_name):
    # Construct the SQL query
    query = f"""
        SELECT v_resto_entreprise.name AS shop_name, 
               DATE(v_pos_order.created_at) AS day, 
               v_product.name AS product_name, 
               SUM(v_pos_order_line.quantity) AS units_sold, 
               SUM(v_pos_order_line.quantity * v_product.price) AS total_sales
        FROM v_pos_order_line
        LEFT JOIN v_product ON v_product.id = v_pos_order_line.product_id
        LEFT JOIN v_pos_order ON v_pos_order.id = v_pos_order_line.order_id
        LEFT JOIN v_pos_session ON v_pos_session.id = v_pos_order.session_id
        LEFT JOIN v_pos ON v_pos.id = v_pos_session.pos_id
        LEFT JOIN v_resto_entreprise ON v_resto_entreprise.id = v_pos.shop_id
        WHERE v_pos_order.created_at BETWEEN '{start_date}' AND '{end_date}'
          AND v_resto_entreprise.name IN ('{shop_name}')
        GROUP BY v_resto_entreprise.id, v_resto_entreprise.name, day, v_product.id, v_product.name
        ORDER BY v_resto_entreprise.name, day ASC;
    """
    return get_query_res_as_pd(query)

# %% ../nbs/00_core.ipynb 23
def get_today_date_string():
    now = datetime.datetime.now()
    return now.strftime("%Y-%m-%d")

# %% ../nbs/00_core.ipynb 25
def get_previous_n_day(n):
    date = datetime.datetime.now() - datetime.timedelta(days=n)
    return date.strftime("%Y-%m-%d")

# %% ../nbs/00_core.ipynb 26
def get_yesterday():
    return get_previous_n_day(1)

# %% ../nbs/00_core.ipynb 33
def last_n_days(n):
    today = datetime.datetime.now()
    days = []
    for i in range(n):
        days.append(
            (today - datetime.timedelta(days=(n - i)))
        )
    return days


# %% ../nbs/00_core.ipynb 35
def compare_sales_for_a_product_every_day(
    start_date,
    end_date, 
    shop_name_a, 
    shop_name_b,
    product_id
    ):
    
    data = get_sales_over_period_in_shop_names_and_product(start_date, end_date, [shop_name_a, shop_name_b], product_id)
    df_data = pd.DataFrame(data, columns=['shop','date','product','qty','rev'])
    
    days = last_n_days(31)
    
    def get_rev(day,shop):
        found = df_data.loc[
                              (df_data['date'] == day.date() ) & (
                               df_data['shop'] == shop
                              )
                            
        ]
        if len(found.rev) == 1:
            return (found.rev.astype(float).iloc[0])
        else:
            return 0
    
    shop_a_sales = [
         get_rev(day,shop_name_a)
         for day 
         in days
    ]
    
    shop_b_sales = [
        get_rev(day,shop_name_b)
        for day 
        in days
    ]
    data = {
        'date':[d.date() for d in days]
    }
    data[shop_name_a] = shop_a_sales;
    data[shop_name_b] = shop_b_sales;
    
    res = pd.DataFrame(data)
    res.set_index('date', inplace=True)
    ax = res.plot(kind='bar', width=0.8, figsize=(10, 6))
    ax.set_xlabel('Date')
    ax.set_ylabel('Sales')
    ax.set_title(f"{shop_name_a} and {shop_name_b} Sales Comparison")
    plt.show()

# %% ../nbs/00_core.ipynb 38
def get_product_names():
    query = """
    SELECT product_product.id, value
    FROM product_product 
    left join ir_translation AS tslt on product_product.product_tmpl_id = tslt.res_id and tslt.name = 'product.template,name'
    WHERE tslt.name = 'product.template,name' AND tslt.lang = 'fr_BE';
    """
    
    results = make_sql_query(query)
    product_translations = {row[0]: row[1] for row in results}
    
    return product_translations

# %% ../nbs/00_core.ipynb 42
def get_latest_ordering_time_per_day_per_shop(product_id):
    query = f"""
    SELECT 
      shop.name,
      DATE_TRUNC('day', po.created_at) as date,
      MAX(po.created_at) as latest_time,
      TO_CHAR(MAX(po.created_at), 'HH24:MI') as latest_hour_and_min,
      sum(pol.quantity) as nbr_ordered
    FROM v_pos_order_line AS pol 
        LEFT JOIN v_pos_order AS po ON po.id = pol.order_id
        LEFT JOIN v_pos_session AS s ON s.id = po.session_id
        LEFT JOIN v_pos AS pos ON pos.id = s.pos_id
        LEFT JOIN v_shop AS shop ON shop.id = pos.shop_id
    WHERE pol.product_id = {product_id}
    GROUP BY DATE_TRUNC('day', po.created_at),shop.name;
    """
    return make_sql_query(query)
    
    

# %% ../nbs/00_core.ipynb 44
def get_sales_for_period_for_shop_per_day(start_date, end_date, shop = ''):
    query = """
    SELECT
       v_shop.name AS shop_name, 
       DATE(v_pos_order.created_at) AS day, 
       SUM(pol.price_unit * v_pos_order_line.quantity) AS total_sales
    FROM v_pos_order_line
    LEFT JOIN pos_order_line as pol on pol.id = v_pos_order_line.id
    LEFT JOIN v_product ON v_product.id = v_pos_order_line.product_id
    LEFT JOIN v_pos_order ON v_pos_order.id = v_pos_order_line.order_id
    LEFT JOIN v_pos_session ON v_pos_session.id = v_pos_order.session_id
    LEFT JOIN v_pos ON v_pos.id = v_pos_session.pos_id
    LEFT JOIN v_shop ON v_shop.id = v_pos.shop_id
    WHERE v_pos_order.created_at BETWEEN '{}' AND '{}'
    """.format(start_date, end_date)
    
    if shop != '':
        query += f"""AND v_shop.name = '{shop}'"""
    
    query += "GROUP BY v_shop.id, v_shop.name, day"

    # make sql query using panda
    return get_query_res_as_pd(query)
    
    return sorted(
        [[row[1], row[2]] for row in make_sql_query(query)],
        key=lambda x: x[0]
    )

# %% ../nbs/00_core.ipynb 45
def get_sales_for_period_for_corporate_restaurant_per_day(start_date, end_date, shop = ''):
    query = """
    SELECT
       v_resto_entreprise.name AS shop_name,
       DATE(v_pos_order.created_at) AS day, 
       SUM(pol.price_unit * v_pos_order_line.quantity) AS total_sales
    FROM v_pos_order_line
    LEFT JOIN pos_order_line as pol on pol.id = v_pos_order_line.id
    LEFT JOIN v_product ON v_product.id = v_pos_order_line.product_id
    LEFT JOIN v_pos_order ON v_pos_order.id = v_pos_order_line.order_id
    LEFT JOIN v_pos_session ON v_pos_session.id = v_pos_order.session_id
    LEFT JOIN v_pos ON v_pos.id = v_pos_session.pos_id
    LEFT JOIN v_resto_entreprise ON v_resto_entreprise.id = v_pos.shop_id
    WHERE v_pos_order.created_at BETWEEN '{}' AND '{}'
    """.format(start_date, end_date)
    
    if shop != '':
        query += f"""AND v_resto_entreprise.name = '{shop}'"""
    
    query += "GROUP BY v_resto_entreprise.id, v_resto_entreprise.name, day"

    # make sql query using panda
    return get_query_res_as_pd(query)
    
    return sorted(
        [[row[1], row[2]] for row in make_sql_query(query)],
        key=lambda x: x[0]
    )

# %% ../nbs/00_core.ipynb 47
def get_date_range(start_date, end_date):
    # convert the input strings to datetime objects
    start_dt = datetime.datetime.strptime(start_date, '%Y-%m-%d')
    end_dt = datetime.datetime.strptime(end_date, '%Y-%m-%d')

    # calculate the number of days between start and end, inclusive
    num_days = (end_dt - start_dt).days + 1

    # use a list comprehension to generate a list of date objects
    dates = [start_dt.date() + datetime.timedelta(days=i) for i in range(num_days)]
    return dates

# %% ../nbs/00_core.ipynb 49
def get_supplier_food_costs_period(start_date, end_date, shop = ''):
    query = """
  SELECT
    to_char(v_purchase_order.order_date, 'YYYY-MM-DD'),
    sum(total_incl_vat) from v_purchase_order
  LEFT JOIN v_supplier on v_supplier.id = v_purchase_order.supplier_id
  LEFT JOIN v_shop on v_shop.id = v_purchase_order.shop_id
  WHERE 
      v_purchase_order.order_date between '{}' and '{}' 
    """.format(start_date, end_date)
    
    if shop != '':
        query += "AND v_shop.name = ('{}')".format(shop)
    
    query += "GROUP BY v_shop.name, to_char(v_purchase_order.order_date, 'YYYY-MM-DD')"                                                
                          
    return sorted(
        [[datetime.datetime.strptime(row[0], '%Y-%m-%d'), row[1]] for row in make_sql_query(query)],
        key=lambda x: x[0]
    )

# %% ../nbs/00_core.ipynb 51
def get_sum_products_bought(start_date, end_date, product_ids, resto_name = ''):
    query = """
  SELECT
    to_char(v_purchase_order.order_date, 'YYYY-MM-DD'),
    sum(total_incl_vat) from v_purchase_order
  LEFT JOIN v_supplier on v_supplier.id = v_purchase_order.supplier_id
  LEFT JOIN v_resto_entreprise on v_resto_entreprise.id = v_purchase_order.shop_id
  WHERE 
      v_purchase_order.order_date between '{}' and '{}' 
    """.format(start_date, end_date)
    
    if resto_name != '':
        query += "AND v_resto_entreprise.name = ('{}')".format(resto_name)
    
    query += "GROUP BY v_resto_entreprise.name, to_char(v_purchase_order.order_date, 'YYYY-MM-DD')"                                                
                          
    return sorted(
        [[datetime.datetime.strptime(row[0], '%Y-%m-%d'), row[1]] for row in make_sql_query(query)],
        key=lambda x: x[0]
    )

# %% ../nbs/00_core.ipynb 52
def get_supplier_food_costs_period_for_resto(start_date, end_date, resto_name = ''):
    query = """
  SELECT
    to_char(v_purchase_order.order_date, 'YYYY-MM-DD'),
    sum(total_incl_vat) from v_purchase_order
  LEFT JOIN v_supplier on v_supplier.id = v_purchase_order.supplier_id
  LEFT JOIN v_resto_entreprise on v_resto_entreprise.id = v_purchase_order.shop_id
  WHERE 
      v_purchase_order.order_date between '{}' and '{}' 
    """.format(start_date, end_date)
    
    if resto_name != '':
        query += "AND v_resto_entreprise.name = ('{}')".format(resto_name)
    
    query += "GROUP BY v_resto_entreprise.name, to_char(v_purchase_order.order_date, 'YYYY-MM-DD')"                                                
                          
    return sorted(
        [[datetime.datetime.strptime(row[0], '%Y-%m-%d'), row[1]] for row in make_sql_query(query)],
        key=lambda x: x[0]
    )

# %% ../nbs/00_core.ipynb 54
def get_atelier_food_costs_period(start_date, end_date, shop = ''):
    query = """
select 
    shop.id as shop_id,
    shop.name as shop_name,
    stats.day as date,
    sum(stats.discounted_atelier_value_sent_htva) as discounted_atelier_value_sent_htva
from v_shop_sales_statistics as stats 
left join v_shop as shop on shop.id = stats.shop_id
left join pos_order_stat_day on pos_order_stat_day.day = stats.day and (pos_order_stat_day.interval <> 'month')
where stats.day between '{}' and '{}' and discounted_atelier_value_sent_htva < 10000
    """.format(start_date, end_date)
    
    
    if shop != '':
        query += f"""AND shop.name = '{shop}'"""
    
    query += "group by shop.id,shop.name,stats.day"                                                
                              
    return sorted(
        [[row[2], row[3]] for row in make_sql_query(query)],
        key=lambda x: x[0]
    )

# %% ../nbs/00_core.ipynb 56
def get_atelier_food_costs_period_for_resto(start_date, end_date, resto_name = ''):
    query = """
select 
    v_resto_entreprise.id as shop_id,
    v_resto_entreprise.name as shop_name,
    stats.day as date,
    sum(stats.discounted_atelier_value_sent_htva) as discounted_atelier_value_sent_htva
from v_shop_sales_statistics as stats 
left join v_resto_entreprise on v_resto_entreprise.id = stats.shop_id
left join pos_order_stat_day on pos_order_stat_day.day = stats.day and (pos_order_stat_day.interval <> 'month')
where 
    stats.day between '{}' 
    AND '{}' 
    AND discounted_atelier_value_sent_htva < 10000
    """.format(start_date, end_date)
    
    
    if resto_name != '':
        query += f"""AND v_resto_entreprise.name = '{resto_name}'"""
    
    query += "group by v_resto_entreprise.id,v_resto_entreprise.name,stats.day"                                                
                              
    return sorted(
        [[row[2], row[3]] for row in make_sql_query(query)],
        key=lambda x: x[0]
    )

# %% ../nbs/00_core.ipynb 58
def get_food_costs_for_period_for_shop_per_day(start_date, end_date, shop = ''):
    atelier = get_atelier_food_costs_period(start_date,end_date, shop=shop)
    atelier_dict = { date: amount for date,amount in atelier }
    supplier = get_supplier_food_costs_period(start_date, end_date,shop=shop)
    supplier_dict = { date.date(): amount for date,amount in supplier }
    date_range = get_date_range(start_date,end_date)
    res = []
    atelier_totals = []
    supplier_totals = []
    for date in date_range:
        
        atelier_for_date = atelier_dict[date] if date in atelier_dict else 0
        supplier_for_date = supplier_dict[date] if date in supplier_dict else 0
        
        atelier_totals.append([date, atelier_for_date])
        supplier_totals.append([date, supplier_for_date])        
        
        res.append([date, 
                    (atelier_for_date if atelier_for_date != None else 0), 
                    (supplier_for_date if supplier_for_date != None else 0)
                   ])
    res = pd.DataFrame(res, columns=['date', 'atelier', 'supplier'])
    res['total'] = res['atelier'] + res['supplier']
    return res

# %% ../nbs/00_core.ipynb 60
def get_food_costs_for_period_for_resto_per_day(start_date, end_date, resto_name = ''):
    atelier = get_atelier_food_costs_period_for_resto(start_date,end_date, resto_name=resto_name)
    atelier_dict = { date: amount for date,amount in atelier }
    supplier = get_supplier_food_costs_period_for_resto(start_date, end_date,resto_name=resto_name)
    supplier_dict = { date.date(): amount for date,amount in supplier }
    date_range = get_date_range(start_date,end_date)
    res = []
    atelier_totals = []
    supplier_totals = []
    for date in date_range:
        
        atelier_for_date = atelier_dict[date] if date in atelier_dict else 0
        supplier_for_date = supplier_dict[date] if date in supplier_dict else 0
        
        atelier_totals.append([date, atelier_for_date])
        supplier_totals.append([date, supplier_for_date])        
        
        res.append([date, 
                    (atelier_for_date if atelier_for_date != None else 0), 
                    (supplier_for_date if supplier_for_date != None else 0)
                   ])
    res = pd.DataFrame(res, columns=['date', 'atelier', 'supplier'])
    res['total'] = res['atelier'] + res['supplier']
    return res
