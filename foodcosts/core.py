# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['get_credentials', 'get_db_connection_string', 'get_query_res_as_pd', 'make_sql_query', 'get_shop_names',
           'get_sales_by_day_query', 'get_sales_by_day', 'get_products_sold_for_a_shop', 'get_products_sold_for_a_re',
           'get_products_sold_for_a_re_as_pd', 'get_today_date_string', 'get_previous_n_day', 'get_yesterday',
           'last_n_days', 'compare_sales_for_a_product_every_day', 'get_product_names']

# %% ../nbs/00_core.ipynb 1
import json
import psycopg2
import os
import matplotlib.pyplot as plt
import numpy as np
import datetime
import pandas as pd
from sqlalchemy import create_engine, text as sql_text
import os
import configparser

# %% ../nbs/00_core.ipynb 8
def get_credentials():
    config = configparser.ConfigParser()
    config.read('config.ini')
    # Access a value in the configuration file
    values = config['DEFAULT']
    if values:
        print('config.ini file available... using that')
        return values

    print('config.ini file not available... looking at environment variables')
    
    return {
        "PGUSER": os.environ.get('PGUSER', "dashboard_user"),
        "PGHOST": os.environ.get("PGHOST", "db13.fthek.be"),
        "PGPASSWORD": os.environ.get("PGPASSWORD", "mrj2mpq!xge5UPA7ecf"),
        "PGDATABASE": os.environ.get("PGDATABASE", "fonteynev13prod"),
        "PGPORT": os.environ.get("PGPORT","5432" ),
    }
    
    

# %% ../nbs/00_core.ipynb 9
def get_db_connection_string():
    data = get_credentials()
    return 'postgresql://' + data["PGUSER"] + ':' + data["PGPASSWORD"] + '@' + str(data["PGHOST"]) + ':' + str(data["PGPORT"]) + "/" + data["PGDATABASE"]

# %% ../nbs/00_core.ipynb 11
def get_query_res_as_pd(query):
    connection = create_engine(get_db_connection_string())
    return pd.read_sql_query(
        con=connection.connect(),
        sql=sql_text(query)
    )

# %% ../nbs/00_core.ipynb 13
def make_sql_query(QUERY):
    data = get_credentials()
    try:
        # Connect to the database
        conn = psycopg2.connect(
            host=data["PGHOST"],
            database=data["PGDATABASE"],
            user=data["PGUSER"],
            password=data["PGPASSWORD"]
        )

        # Create a cursor object
        cursor = conn.cursor()

        # Execute the query
        cursor.execute(QUERY)

        # Fetch the result
        result = cursor.fetchall()
        cursor.close()
        conn.close()
        return result    
        
    except (Exception, psycopg2.Error) as error:
        print("Error while connecting to PostgreSQL", error)


# %% ../nbs/00_core.ipynb 14
def get_shop_names():
    return [shop for (i, shop) in make_sql_query("SELECT * FROM v_shop;") if (shop not in ["ATELIER","PAVLOVA BAR ANVERS"])]

# %% ../nbs/00_core.ipynb 16
def get_sales_by_day_query(start_date, end_date, shop_names, product_id):
    # Construct the SQL query
    shop_name_condition = f"""AND v_shop.name IN ('{"','".join(shop_names)}')""" if len(shop_names) else ""
    query = f"""
        SELECT v_shop.name AS shop_name, 
               DATE(v_pos_order.created_at) AS day, 
               v_product.name AS product_name, 
               SUM(v_pos_order_line.quantity) AS units_sold, 
               SUM(v_pos_order_line.quantity * v_product.price) AS total_sales
        FROM v_pos_order_line
        LEFT JOIN v_product ON v_product.id = v_pos_order_line.product_id
        LEFT JOIN v_pos_order ON v_pos_order.id = v_pos_order_line.order_id
        LEFT JOIN v_pos_session ON v_pos_session.id = v_pos_order.session_id
        LEFT JOIN v_pos ON v_pos.id = v_pos_session.pos_id
        LEFT JOIN v_shop ON v_shop.id = v_pos.shop_id
        WHERE v_pos_order.created_at BETWEEN '{start_date}' AND '{end_date}'
          {shop_name_condition}
          AND v_product.id = {product_id}
        GROUP BY v_shop.id, v_shop.name, day, v_product.id, v_product.name
        ORDER BY v_shop.name, day ASC;
    """

    return query
    
def get_sales_by_day(start_date, end_date, shop_names, product_id):
    return [row for row in make_sql_query(get_sales_by_day_query(start_date, end_date, shop_names, product_id))]


# %% ../nbs/00_core.ipynb 17
def get_products_sold_for_a_shop(start_date, end_date, shop_name):
    # Construct the SQL query
    query = f"""
        SELECT v_shop.name AS shop_name, 
               DATE(v_pos_order.created_at) AS day, 
               v_product.name AS product_name, 
               SUM(v_pos_order_line.quantity) AS units_sold, 
               SUM(v_pos_order_line.quantity * v_product.price) AS total_sales
        FROM v_pos_order_line
        LEFT JOIN v_product ON v_product.id = v_pos_order_line.product_id
        LEFT JOIN v_pos_order ON v_pos_order.id = v_pos_order_line.order_id
        LEFT JOIN v_pos_session ON v_pos_session.id = v_pos_order.session_id
        LEFT JOIN v_pos ON v_pos.id = v_pos_session.pos_id
        LEFT JOIN v_shop ON v_shop.id = v_pos.shop_id
        WHERE v_pos_order.created_at BETWEEN '{start_date}' AND '{end_date}'
          AND v_shop.name IN ('{shop_name}')
        GROUP BY v_shop.id, v_shop.name, day, v_product.id, v_product.name
        ORDER BY v_shop.name, day ASC;
    """
    return [row for row in make_sql_query(query)]

# %% ../nbs/00_core.ipynb 18
def get_products_sold_for_a_re(start_date, end_date, shop_name):
    # Construct the SQL query
    query = f"""
        SELECT v_resto_entreprise.name AS shop_name, 
               DATE(v_pos_order.created_at) AS day, 
               v_product.name AS product_name, 
               SUM(v_pos_order_line.quantity) AS units_sold, 
               SUM(v_pos_order_line.quantity * v_product.price) AS total_sales
        FROM v_pos_order_line
        LEFT JOIN v_product ON v_product.id = v_pos_order_line.product_id
        LEFT JOIN v_pos_order ON v_pos_order.id = v_pos_order_line.order_id
        LEFT JOIN v_pos_session ON v_pos_session.id = v_pos_order.session_id
        LEFT JOIN v_pos ON v_pos.id = v_pos_session.pos_id
        LEFT JOIN v_resto_entreprise ON v_resto_entreprise.id = v_pos.shop_id
        WHERE v_pos_order.created_at BETWEEN '{start_date}' AND '{end_date}'
          AND v_resto_entreprise.name IN ('{shop_name}')
        GROUP BY v_resto_entreprise.id, v_resto_entreprise.name, day, v_product.id, v_product.name
        ORDER BY v_resto_entreprise.name, day ASC;
    """
    return [row for row in make_sql_query(query)]

# %% ../nbs/00_core.ipynb 19
def get_products_sold_for_a_re_as_pd(start_date, end_date, shop_name):
    # Construct the SQL query
    query = f"""
        SELECT v_resto_entreprise.name AS shop_name, 
               DATE(v_pos_order.created_at) AS day, 
               v_product.name AS product_name, 
               SUM(v_pos_order_line.quantity) AS units_sold, 
               SUM(v_pos_order_line.quantity * v_product.price) AS total_sales
        FROM v_pos_order_line
        LEFT JOIN v_product ON v_product.id = v_pos_order_line.product_id
        LEFT JOIN v_pos_order ON v_pos_order.id = v_pos_order_line.order_id
        LEFT JOIN v_pos_session ON v_pos_session.id = v_pos_order.session_id
        LEFT JOIN v_pos ON v_pos.id = v_pos_session.pos_id
        LEFT JOIN v_resto_entreprise ON v_resto_entreprise.id = v_pos.shop_id
        WHERE v_pos_order.created_at BETWEEN '{start_date}' AND '{end_date}'
          AND v_resto_entreprise.name IN ('{shop_name}')
        GROUP BY v_resto_entreprise.id, v_resto_entreprise.name, day, v_product.id, v_product.name
        ORDER BY v_resto_entreprise.name, day ASC;
    """
    return get_query_res_as_pd(query)

# %% ../nbs/00_core.ipynb 22
def get_today_date_string():
    now = datetime.datetime.now()
    return now.strftime("%Y-%m-%d")

# %% ../nbs/00_core.ipynb 24
def get_previous_n_day(n):
    date = datetime.datetime.now() - datetime.timedelta(days=n)
    return date.strftime("%Y-%m-%d")

# %% ../nbs/00_core.ipynb 25
def get_yesterday():
    return get_previous_n_day(1)

# %% ../nbs/00_core.ipynb 32
def last_n_days(n):
    today = datetime.datetime.now()
    days = []
    for i in range(n):
        days.append(
            (today - datetime.timedelta(days=(n - i)))
        )
    return days


# %% ../nbs/00_core.ipynb 34
def compare_sales_for_a_product_every_day(
    start_date,
    end_date, 
    shop_name_a, 
    shop_name_b,
    product_id
    ):
    
    data = get_sales_by_day(start_date, end_date, [shop_name_a, shop_name_b], product_id)
    df_data = pd.DataFrame(data, columns=['shop','date','product','qty','rev'])
    
    days = last_n_days(31)
    
    def get_rev(day,shop):
        found = df_data.loc[
                              (df_data['date'] == day.date() ) & (
                               df_data['shop'] == shop
                              )
                            
        ]
        if len(found.rev) == 1:
            return (found.rev.astype(float).iloc[0])
        else:
            return 0
    
    shop_a_sales = [
         get_rev(day,shop_name_a)
         for day 
         in days
    ]
    
    shop_b_sales = [
        get_rev(day,shop_name_b)
        for day 
        in days
    ]
    data = {
        'date':[d.date() for d in days]
    }
    data[shop_name_a] = shop_a_sales;
    data[shop_name_b] = shop_b_sales;
    
    res = pd.DataFrame(data)
    res.set_index('date', inplace=True)
    ax = res.plot(kind='bar', width=0.8, figsize=(10, 6))
    ax.set_xlabel('Date')
    ax.set_ylabel('Sales')
    ax.set_title(f"{shop_name_a} and {shop_name_b} Sales Comparison")
    plt.show()

# %% ../nbs/00_core.ipynb 37
def get_product_names():
    query = """
    SELECT product_product.id, value
    FROM product_product 
    left join ir_translation AS tslt on product_product.product_tmpl_id = tslt.res_id and tslt.name = 'product.template,name'
    WHERE tslt.name = 'product.template,name' AND tslt.lang = 'fr_BE';
    """
    
    results = make_sql_query(query)
    product_translations = {row[0]: row[1] for row in results}
    
    return product_translations
